<launch>
  
  <env name="ROSCONSOLE_CONFIG_FILE" 
       value="$(find my_rostricycle)/custom_rosconsole.conf"/>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rrbot_gazebo)/worlds/rrbot.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>
  
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find my_rostricycle)/urdf/rostricycle.xacro'" />

  <!-- publish the state of a robot to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  
  <!-- reads robot_description, finds all of the non-fixed joints -->
  <!-- and publishes a JointState message with all those joints defined -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node> 
  
  <!-- Load control definitions -->
  <rosparam file="$(find my_rostricycle)/config/rostricycle_controller.yaml" command="load" />
  
  <!-- Load ros diff controller: rostricycle_controller 名稱連結到 config/.yaml 首行 -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	    output="screen" args="agv_robot_joint_publisher agv_ackermann_steering_controller"/> 
  
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model rostricycle -param robot_description"/>
    
  <!-- using teleop_twist_keyboard -->
  <!-- maybe need to: $ sudo apt install ros-kinetic-teleop-twist-keyboard -->
  <!--
  <remap from="/cmd_vel" to="/rostricycle_controller/cmd_vel"/>
  <node name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" />
  -->
</launch>
